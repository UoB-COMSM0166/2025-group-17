@startuml

' 核心控制系统
class GameStateManager {
  -inputHandler: InputHandler
  -PageDrawer: MenuDrawer
  -eventBus: EventBus
  -isGameCompleted: boolean
  -pauseTime: number
  -timeSpent: number
  -currentBGM: p5.SoundFile
  -filter: p5.LowPass
  -roomBGMs: { [key: number]: p5.SoundFile }

  +GameStateManager(eventBus: EventBus, PageDrawer: MenuDrawer, inputHandler: InputHandler) <<constructor>>
  +update(): void
  +handlePlayerShooting(): void
  -shouldRenderMenu(): boolean
  -checkSavePoint():void
  -saveGameData(): void
  +loadGameData(): void
  +startNewGame(): void
  -resetGame(): void
  +pauseGame(): void
  +resumeGame(): void
  +exitToMainMenu(): void
  +playMainmenuSound(): void
  +playBGM(sound: p5.SoundFile): void
  +playBGMForRoom(index: number): void
  +stopBGM(): void
  -setupRoom(roomDataId: number): void
  -adjustCanvasWithAspectRatio(): void
  -resizeBtns(): void
}

class EventBus {
  -events: Object

  +EventBus() <<constructor>>
  +subscribe(event: string, callback: Function): void
  +publish(event: string, data: any): void
}

class MenuDrawer {
   -scenePlayer: ScenePlayer
   -helpBar: HelpBar
   -state: string
   -btnIndex: number
   -eventBus: EventBus
   -btnContinue: p5.Element
   -btnNewGame: p5.Element
   -mainMenuBtns: p5.Element[]
   -btnPause: p5.Element
   -btnResume: p5.Element
   -btnExit: p5.Element
   -pauseMenuBtns: p5.Element[]
   -btnLoadLastSave: p5.Element
   -btnRestart: p5.Element
   -gameOverBtns: p5.Element[]

   +MenuDrawer(eventBus: EventBus, sceneData: Object, sceneImgs: { [key: string]: p5.Image }, sceneSounds: { [key: string]: p5.SoundFile }, helpBarData: Object) <<constructor>>
   -createMenuButton(imgPath: string, label: string, yOffset: number, callback: Function, hidden: boolean): p5.Element
   -handleMouseOver(btn: p5.Element): void
   -repositionButton(btn: p5.Element, yOffset: number): void
   +setupMainMenu(): void
   -handleNewGame(): void
   -playStartScene(): void
   +setupPauseMenu(): void
   +setupGameOverPage(): void
   -handleRestart(): void
   +drawMainMenu(): void
   +drawPauseMenu(): void
   -drawMainMsg(title: string): void
   +drawGameOverPage(): void
   +getGameState(): string
   +setInGameState(): void
   +setCompletedState(): void
   +drawGameCompleted(totalTime: number): void
   +showStartButtons(): void
   +toggleStartButtons(): void
   +showResumeButtons(): void
   +toggleResumeButtons(): void
   +showGameOverButtons(): void
   +toggleGameOverButtons(): void
   +renderMenu(playerObj: Player, timeSpent: number): void
   -isScenePage(): string
   -shouldRenderMenu(playerObj: Player): string
   +updatePauseBtnPosition(): void
   +handleBtnPressed(playerObj: Player)
   -handleSceneProgress(): void
   -playNextStoryLine(): void
   -transitionToEndScene(): void
   -returnToPrevPage(playerObj: Player): void
   -controlBtnsByKeys(buttons: p5.Element[], eventTypes: string[]): void
   -pressBtnsByKeys(buttons: p5.Element[], eventTypes: string[]): void
   -moveBetweenBtnsByKeys(buttons: p5.Element[]): void
   -isGameOver(playerObj: Player): boolean
   +resizeBtns(): void
}

class InputHandler {
  -currentRoom: Room
  -collisionDetector: CollisionDetector
  -lastCollisionTime: number
  -fadeMgr: FadeManager

  +InputHandler(roomObj: Room) <<constructor>>
  +update(playerObj: Player): void
  +handlePlayerShooting(playerObj: Player): void
  +updateBullets(playerObj: Player): void
  -moveToNextRoom(playerObj: Player, tolerance: number): void
  -loadRoom(): void
  +getCurrentRoomId(): number
  +getCurrentLevelId(): number
  +getCurrentRoomNo(): number
  +isGameCompleted(): boolean
  -getMaxCurrentRoomId(rawRoomData: Object): number
}

class ScenePlayer {
  -data: Object
  -images: { [key: string]: p5.Image }
  -sounds: { [key: string]: p5.SoundFile }
  -currentScene: Array<SceneLine>
  -currentIndex: number
  -currentBGM: p5.SoundFile | null
  -noiseIntensity: number

  +ScenePlayer(data: Object, images: { [key: string]: p5.Image }, sounds: { [key: string]: p5.SoundFile }) <<constructor>>
  +draw(): void
  -applyNoiseEffect(): void
  +isSceneComplete(): boolean
  +next(): void
  -playSound(): void
  +stopBGM(): void
  +setScene(sceneName: string): void
}

class HelpBar {
  -visible: boolean
  -height: number
  -opacity: number
  -btnOpacity: number
  -iconCharSize: number
  -textSize: number
  -animation: { y: number, targetY: number, easing: number, duration: number }
  -stateMap: { [key: string]: number } 
  -currentState: string
  -currentBtnIdx: number
  -pages: Array<HelpBarPage>

  +HelpBar(jsonData: Object) <<constructor>>
  +update(currentState: string, currentBtnIdx: number): void
  +updateText(currentState: string, currentBtnIdx: number): void
  -updateAnimation(): void
  -draw(currentState: string, btnIndex: number): void
  -drawKeyButtons(textY: number, padding: number, keys: Array<KeyItem>): void
  -drawKey(keyString: string, x: number, y: number): number
  -drawSpecialCharacter(char: string, x: number, y: number, charWidth: number, padding: number): number
  -drawRegularCharacter(char: string, x: number, y: number): number
  -containsRegularCharacters(keyString: string): boolean
  -rawTextBackground(startX: number, y: number, currentX: number, charWidth: number, padding: number): number
  -drawButtonBackground(x: number, y: number, width: number, height: number): void
  -drawText(textContent: string, x: number, y: number, align: string, color: number, prefix: string): void
}

class CollisionDetector {
  +detectPlayerCollision(playerObj: Player, objArr: GameObject[]): boolean
  +handleEnemyCollision(enemyArr: Enemy[], obstacleArr: Obstacle[]): void
  -handleEnemyObstacleCollision(enemyArr: Enemy[], obstacleArr: Obstacle[]): void
  +detectBulletCollision(bulletArr: Bullet[], enemyArr: Enemy[], obstacleArr: Obstacle[]): void
  +detectBulletEnemyCollision(bulletArr: Bullet[], enemyArr: Enemy[]): void
  +detectCollision(objA: Object, objB: Object): boolean
  -computeCollisionArea(obj: Object): { left: number, right: number, top: number, bottom: number}
  -isOverlapping(boundsA: { left: number, right: number, top: number, bottom: number}, boundsB: { left: number, right: number, top: number, bottom: number}): boolean
  +detectCollisionWithBullet(bulletObj: , objB: Object): boolean
  +isHitBoundary(obj: Object): boolean
  -isBulletHitWall(bulletObj: Bullet): boolean  
}

class FadeManager {
  -alpha: number
  -speed: number
  -state: string
  -_onMid: Function

  +FadeManager(fadeSpeed: number) <<constructor>>
  +start(callback: Function): void
  +update(): void
  +draw(): void
  +isActive(): boolean
}

' 游戏实体
class Player {
  -maxhp: number = 3
  -baseAtk: number = 50
  -atk: number = 50
  -maxAtk = 100
  -maxSpeed = 4
  -acceleration = 3.0
  -friction = 0.85
  -bulletSize = 20
  -maxBulletSize = 40
  -canShootAgain = true
  -shootCoolDownDuration = 300
  -position = p5.Vector
  -hp: number
  -velocity: p5.Vector
  -size: p5.Vector
  -displaySize: p5.Vector
  -invincibleTimer: number
  -blinkCounter: number
  -bullets: Bullet[]
  -image: p5.Image
  -animations: { up: p5.Image[], down: p5.Image[], left: p5.Image[], right: p5.Image[] }
  -direction: string
  -currentFrame: number
  -frameCounter: number
  -frameDelay: number

  +Player(x: number = leftBoundary, y: number = heightInPixel / 2) <<constructor>>
  +getAtk(): number
  +getBulletSize(): number
  +getHp(): number
  +getMaxHp(): number
  +setHp(newHp: number): void
  +resetRoomState(newHp: number, atk: number, bulletSize: number, x: number, y: number): void
  +updateHp(valueToAdd: number, invincibleDuration: number = 60): void
  +shoot(direction: string): void
  +powerUp(): void
  +updateBlinking(): void
  +display(): void
  +updateVelocity(): void
  +applyFriction(): void
  +resetVelocity(): void
  +updatePosition(): void
  +revertPosition(): void
  +resetInvincibleTimer(duration: number = 60): void
}

class Enemy {
  -hp: number
  -position: p5.Vector
  -size: p5.Vector
  -velocity: p5.Vector
  -image: p5.Image
  -frames: p5.Image[]
  -currentFrame: number
  -frameCounter: number
  -frameDelay: number

  +Enemy(x: number, y: number, hp: number, enImage: p5.Image, levelId: number) <<constructor>>
  +update(): void
  +display(): void
  +collide(otherObj: Object): void
}

class Chaser {
  -shakeIntensity: number
  -isDead: boolean
  -position: p5.Vector
  -size: p5.Vector
  -collisionDetector: CollisionDetector
  -maxHp: number = 800
  -hp: number
  -isHurt: boolean
  -hitFrame: number
  -speed: number = 1
  -dashSpeed: number = 20
  -chaseRange: number= 150
  -isDashing: boolean
  -dashCooldown: number = 100
  -currentCooldown: numbe
  -dashDamageApplied: boolean
  -dashDuration: number = 10
  -currentDashTime: number
  -frames: p5.Image[]
  -currentFrame: number
  -frameCounter: number
  -frameDelay: number = 12

  +Chaser(x: number, y: number) <<constructor>>
  +update(): void
  +applyDashDamage(): void
  +chasePlayer(): void
  +startDash(): void
  +hitWall(): void
  +takeDamage(damage: number): number
  -markAsDead(): void
  +shouldBeRemoved(): boolean
  +detectBulletCollision(bulletArr: Bullet[]): void
  +checkBulletCollision(bullet: Bullet): boolean
  +display(): void
  +displayDeadBoss(img: p5.Image): void
  +applyHitEffect(flashFrame: number): void
}

class Shooter {
  <<abstract>>
  -shakeIntensity: number
  -isDead: boolean
  -position: p5.Vector
  -size: p5.Vector
  -collisionDetector: CollisionDetector
  -maxHp: number = 800
  -hp: number
  -isHurt: boolean
  -hitFrame: number
  -speed: number = 0.8
  -moveCooldown: number = 60
  -currentMoveCooldown: number
  -direction: p5.Vector
  -shootCooldown: number = 280
  -currentShootCooldown: number
  -bullets: ShooterBullet[]
  -warningTime: number
  -warningDuration: number = 60
  -shooterSoundOn: boolean
  -frames: p5.Image[]
  -currentFrame: number
  -frameCounter: number
  -frameDelay: number = 10

  +Shooter(x: number, y: number, collisionDetector: CollisionDetector) <<constructor>>
  +update(): void
  +checkBoundaryCollision(): void
  +shoot(): void
  +takeDamage(damage: number): void
  -markAsDead(): void
  +shouldBeRemoved(): boolean
  +detectBulletCollision(bulletArr: Bullet[]): void
  +checkBulletCollision(bullet: Bullet): boolean
  +checkPlayerCollisionDirect(): void
  +display(): void
  -displayDeadBoss(img: p5.Image): void
  +displayWarningEffect(): void
  +applyHitEffect(flashFrame: number): void
  +getPosition(): p5.Vector
  +getSize(): p5.Vector
}

class ShooterFourDir {
  +ShooterFourDir(+Shooter(x: number, y: number, collisionDetector: CollisionDetector) <<constructor>>
  +shoot(): void
}

class ShooterEightDir {
  +ShooterEightDir(x: number, y: number, collisionDetector: CollisionDetector) <<constructor>>
  +shoot(): void
}

class Bullet {
  -position: p5.Vector
  -size: p5.Vector
  -speed: number = 4
  -direction: string
  -damage: number
  -image: p5.Image
  -initialAngle: number
  -spin: number
  -rotationSpeed: number
  -isHit: boolean
  -hitFrame: number
  -frames: p5.Image[]
  -life: number
  -maxLife: number = 100
  -trail: Array<{ pos: p5.Vector, age: number }>
  -trailMax: number = 15
  
  +Bullet(x: number, y: number, direction: string, dmg: number img: p5.Image, s: number = 20) <<constructor>>
  +update(): void
  +display(): void
  +markAsHit(playSound: boolean): void
  +shouldBeRemoved(): boolean
}

class ShooterBullet {
  -position: p5.Vector
  -direction: p5.Vector
  -damage: number
  -speed: number
  -image: p5.Image
  -isHit: boolean
  -size: p5.Vector
  -angle: number

  +ShooterBullet(x: number, y: number, direction: , dmg: number, speed: number, bulletImg: p5.Image) <<constructor>>
  +markAsHit: void
  +update(): void
  +display(): void
}

class Room {
  -currentRoomData: Object
  -obstacleCount: number
  -startTime: number
  -clearTime: number
  -items: Item[]
  -savePoint: SavePoint
  -door: Door
  -enemies: Enemy[]
  -chaser: Chaser[]
  -shooter: Shooter[]
  -obstacles: Obstacle[]
  -size: { width: number, height: number }
  -collisionDetector: CollisionDetector
  
  +Room() <<constructor>>
  +setup(data: Object): void
  +getRoomDataId(): number
  +getCurrentRoomId(): number
  +getCurrentLevelId(): number
  +getCurrentRoomNo(): number
  +update(playerObj: Player): void
  -handleItemPicking(playerObj: Player): void
  -handleItemBulletsCollision(bulletArr: Bullet[], itemArr: Item[]): void
  +display(playerObj: Player): void
  -displayInstructions(): void
  -displayBossStatus(): void
  +generateObstacles(currentRoomData: Object): void
  +generateEnemies(currentRoomData: Object): void
  +generateChaser(): void
  +generateShooter(): void
  +generateFinalBossRoom(): void
  +updateEnemies(): void
  +updateShooter(): void
  -shouldDropItemAndRemove(bossObj: Object): boolean
  -dropItemFromBossType(bossObj: Object, itemX: number, itemY: number, bossBtm: number): void
  +updateAfterClear(): void
  +checkClearCondition(): boolean
  +resolveBossCollision(): void
  +setObstacleCount(currentRoomData: Object): void
  +generateTutorialObs(obsData: Object): void
  -setGameTime(currentRoomId: number): void
}

class Door {
  -position: p5.Vector
  -size: p5.Vector
  -currentDoorImg: p5.Image
  -isOpen: boolean
  
  +Door() <<constructor>>
  +display(): void
  +open(): void
  +close(): void
  +updateImage(): void
}

class Item {
  -ITEM_IMAGES: { [key: string]: p5.Image } <<static>>
  -EFFECT_MAP: { [key: string]: Function } <<static>>
  -position: p5.Vector
  -vel: p5.Vector
  -type: string
  -gravity: number = 0.2
  -bounce: number = 0.4
  -image: p5.Image
  -size: p5.Vector
  -groundY: number

  +Item(x: number, y: number, bossBtm: number, type: string) <<constructor>>
  +update(): void
  -applyGravity(): void
  -handleGroundCollision(): void
  +display(): void
  +applyEffect(playerObj: Player): void
  +getType(): string
}

class Obstacle {
  -position: p5.Vector
  -size: p5.Vector
  -image: p5.Image

  +Obstacle(x: number, y: number, obImage: p5.Image) <<constructor>>
  +display(): void
}

class SavePoint {
  -position: p5.Vector
  -size: p5.Vector
  -image: p5.Image
  -checkedImg: p5.Image
  -lastSaveTime: number
  -isChecked: boolean

  +SavePoint(x: number, y: number) <<constructor>>
  +display(): void
  +checked(): void
}

' UI系统

class PlayerStatusDisplayer {
  -iconSize: number = 40 <<static>>
  -iconPadding: number = 15 <<static>>
  -hPadding: number = 20 <<static>>
  -vPadding: number = 20 <<static>>
  -uiTextSize: number = 24 <<static>>

  +display(playerObj: Player, currentlevelId: number, currentRoomNo: number, timeSpent: number, heartImg: p5.Image, damagedHeartImg: p5.Image, uiFont: p5.Font): void <<static>>
  -drawHealthBar(playerObj: Player, heartImg: p5.Image, damagedHeartImg: p5.Image): void <<static>>
  -drawCurrentLevel(currentlevelId: number, currentRoomNo: number, uiFont: p5.Font): void <<static>>
  -drawTimer(timeSpent: number, uiFont:p5.Font): void <<static>>

}

class BossStatusDisplayer {
  -vPadding: number = 20 <<static>>
  -hpBarOffsetX: number = 22.5 <<static>>
  -hpBarOffsetY: number = 27.5 <<static>>

  +display(bossObj: Object, bossHpBarImg: p5.Image, bossHpImg: p5.Image): void <<static>>
  -preprocessImages(bossHpBarImg: p5.Image, bossHpImg: p5.Image): void <<static>>
  -calculateBarPositionX(bossHpBarImg: p5.Image): number <<static>>
  -createHpPercentageImage(bossObj: Object, bossHpImg: p5.Image): p5.Image <<static>>
  -drawHpBackground(bossHpImg: p5.Image, positionX: number): void <<static>>
  -applyHitEffects(bossObj: Object): void <<static>>
  -drawCurrentHp(hpPercentageImg: p5.Image, positionX: number): void <<static>>
  -drawHpBar(bossHpBarImg: p5.Image, positionX: number): void <<static>>
}

class InstructionDisplayer {
  -fadeDuration: number = 500 <<static>>
  -displayDuration: number = 1000 <<static>>
  -boxSize: number = 60 <<static>>
  -fontSize: number = 20 <<static>>
  -fontFamily: string = "monospace" <<static>>

  +display(textContent: string, displayStartTime: number): void <<static>>
  -calculateAlpha(displayStartTime: number): number <<static>>
  -drawDialogBox(alpha: number): void <<static>>
  -drawHighlightEdges(alpha: number): void <<static>>
  -drawInstructionText(textContent: string, alpha: number): void <<static>>
}

' 定义主类
class PolicyDisplayer {
    +config: PolicyConfig <<static>> 
    +display(): void <<static>> 
}

' 定义配置类
class PolicyConfig {
    title: String
    content: List<String>
    styles: StyleConfig
}

' 定义样式子配置类
class StyleConfig {
    background: Integer[3]
    titleSize: Integer
    bodySize: Integer
    titleColor: Integer[1]
    bodyColor: Integer[1]
}

' 关联关系
PolicyDisplayer --> PolicyConfig : config
PolicyConfig  --> StyleConfig  : styles



' 关系定义
GameStateManager "1" o-- "1" EventBus
GameStateManager "1" o-- "1" InputHandler
GameStateManager "1" o-- "1" MenuDrawer

MenuDrawer "1" *-- "1" ScenePlayer
MenuDrawer "1" *-- "1" HelpBar
MenuDrawer "1" o-- "1" EventBus

InputHandler "1" *-- "1" CollisionDetector
InputHandler "1" o-- "1" Room
InputHandler "1" o-- "1" FadeManager

Player "1" *-- "many" Bullet

Chaser "1" *-- "1" CollisionDetector

Shooter <|-- ShooterFourDir
Shooter <|-- ShooterEightDir

ShooterFourDir "1" *-- "many" ShooterBullet
ShooterEightDir "1" *-- "many" ShooterBullet

Room "1" *-- "1" CollisionDetector
Room "1" *-- "1" Door
Room "1" *-- "1" SavePoint
Room "1" *-- "many" Enemy
Room "1" *-- "many" Obstacle
Room "1" *-- "many" Item
Room "1" *-- "many" Chaser
Room "1" *-- "many" ShooterFourDir
Room "1" *-- "many" ShooterEightDir

@enduml